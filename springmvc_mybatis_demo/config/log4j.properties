#Global Log Level全局log级别(OFF,FATAL,ERROR,WARN,INFO,DEBUG,ALL)，
#开发环境建议debug，生产环境建议info
log4j.rootLogger=DEBUG,STDOUT

###### STDOUT Logger ###############
log4j.appender.STDOUT=org.apache.log4j.ConsoleAppender
#输出目的Appender的日志级别，Appender的级别设置要优先于logger的
#级别设置，即先使用Appender的，而不管logger的日志级别是怎样设置的
log4j.appender.STDOUT.Threshold=DEBUG
log4j.appender.STDOUT.layout=org.apache.log4j.PatternLayout
log4j.appender.STDOUT.layout.ConversionPattern=[%p] [%l] %10.10c - %m%n

###### File Logger ###############
#开发时，使用DEBUG，发布时最好修改成INFO，如果未设置级别，则使用
#父日志记录器的，设置了就使用logger的，不管父日志怎样设置
log4j.logger.com.mypakge=DEBUG,FILELOGER
#开发时设为true，表示需要屏幕输出，发布时这里最好设置为false，表示不继承父日志记录器的Appender
log4j.additivity.com.mypakge=true
log4j.appender.FILELOGER=org.apache.log4j.RollingFileAppender
#设置日志输出编码方式为UTF-8，如果不指定，会以当前运行操作系统的编码方式记录，这样在有的Linux上会出面乱码
log4j.appender.FILELOGER.encoding=UTF-8
#${LOGS_PATH}为JVM环境变量，我们可以在运行里给JVM加上该参数 -DLOGS_PATH=e:/tmp/log
log4j.appender.FILELOGER.File=${LOGS_PATH}/system.log
log4j.appender.FILELOGER.MaxFileSize=1024KB
log4j.appender.FILELOGER.MaxBackupIndex=10
#文件采用追加方式
log4j.appender.FILELOGER.Append=true
log4j.appender.FILELOGER.layout=org.apache.log4j.PatternLayout
log4j.appender.FILELOGER.layout.ConversionPattern=[%d{yyy-MM-dd HH:mm:ss.SSS}] [%p] [%t] [%c] [%l] - [%m]%n

###### THREAD Logger ###############
#线程日志一般记入到另一个文件，线程日志与主线程日志基本上没有什么逻辑关系
log4j.logger.threadlogger=DEBUG,THREADLOGER
log4j.additivity.threadlogger=true
log4j.appender.THREADLOGER=org.apache.log4j.RollingFileAppender
log4j.appender.THREADLOGER.encoding=UTF-8
log4j.appender.THREADLOGER.File=${LOGS_PATH}/threadLog.log
log4j.appender.THREADLOGER.MaxFileSize=2000KB
log4j.appender.THREADLOGER.MaxBackupIndex=10
log4j.appender.THREADLOGER.layout=org.apache.log4j.PatternLayout
log4j.appender.THREADLOGER.layout.ConversionPattern=[%d{yyy-MM-dd HH:mm:ss.SSS}] [%p] [%t] [%c] [%l] - [%m]%n

###### SOCKET Logger ###############
log4j.addivity.org.apache=true 
log4j.appender.SOCKET=org.apache.log4j.net.SocketAppender
#注，SocketAppender没有encoding属性，而接收日志的服务器端类org.apache.log4j.net.Socke
#tServer也不能设置编码方式，这里在考虑他们在通信时是不是传递的对象，而不是传递的字符串呢？
#log4j.appender.SOCKET.encoding=UTF-8
log4j.appender.SOCKET.RemoteHost=localhost
log4j.appender.SOCKET.Port=8089
log4j.appender.SOCKET.LocationInfo=true
log4j.appender.SOCKET.layout=org.apache.log4j.PatternLayout
#这里的格式配置不是很中要，好像不是要所这里的格式要输出那些消息，这里还是这个疑问就是在通信时是否是
#传递的是序列化后的对象？因为服务器接收到消息后能以任何格式输出，可见传递的信息是完整的。~@！@#！哈
#刚跟了一下org.apache.log4j.net.SocketAppender源码，在获取输出流的时候使用的是对象流，如下：
#oos = new ObjectOutputStream(socket.getOutputStream());，这样就进一步证了我的想法，在
#通信时时传递的是对象，所以就不存在字符编码的问题与客户端日志格式输出问题。
log4j.appender.SOCKET.layout.ConversionPattern=%m

###### MAIL Logger ###############
log4j.appender.MAIL=org.apache.log4j.net.SMTPAppender
log4j.appender.MAIL.Threshold=ERROR
log4j.appender.MAIL.BufferSize=10
log4j.appender.MAIL.From=junJZ_2008@126.com
log4j.appender.MAIL.SMTPHost=smtp.126.com
 
#如果含有中文，则需使用native2asii log4j.properties log4jxx.properties 进行转换，否则乱码
log4j.appender.MAIL.Subject=Log4J\u63D0\u9192\u60A8\uFF1A\u7CFB\u7EDF\u53D1\u751F\u4E86\u4E25\u91CD\u9519\u8BEF 
log4j.appender.MAIL.To=junJZ_2008@163.com
log4j.appender.MAIL.SMTPUsername=junJZ_2008@126.com
log4j.appender.MAIL.SMTPPassword=XXX
log4j.appender.MAIL.layout=org.apache.log4j.PatternLayout
log4j.appender.MAIL.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n

###### DB Logger ###############
log4j.appender.DB=org.apache.log4j.jdbc.JDBCAppender
log4j.appender.DB.driver=com.mysql.jdbc.Driver
log4j.appender.DB.URL=jdbc:mysql://127.0.0.1/test
log4j.appender.DB.bufferSize=1
log4j.appender.DB.user=root
log4j.appender.DB.password=111111
log4j.appender.DB.sql=insert into oplog (UserName,opttype,createTime,LogLevel,methodinfo,MSG) values ('%X{UserName}','%X{opttype}','%d{yyyy-MM-dd HH:mm:ss.SSS}','%p','%l','%m')    
log4j.appender.DB.layout=org.apache.log4j.PatternLayout   